Author: GokulVasan[gokulvas@gmail.com]
/*============Definition of TaskSet that needs to be fed to the parsing tool===============================*/

Note:
	Definition here is the format that needs to be given to the tool that injects the jobs and interval 
to the kernel space.

Assumption: assumes that offline works perfectly and the value defined are resolved as per the joint
	    scheduling algorithm's offline scheduling.all the time-unit is considered discrete.

	1. we need 2 tables within a hyperperiod, i.e. interval table and job table; The whole table needs 
		to be in a file which needs to be fed to the compilation tool that injects the data into 
		kernel space, The sequence would be a job table followed by interval table 
		and the delimiters for start and end of the table should be the magic number preceded by 
		table seperator.
	
	MAGIC_NUMBER for data seperation:
	magic number definition: Î£ ascii value of the string in hex,
				 should be 4 bytes long data.
	1. INTERVAL_START 0x2D8
	2. JOB_START 0x1F6
	3. HP_START 0x244
	4. HP_END  0x1CE
	5. INTERVAL_END 0x221
	6. JOB_END 0x211
		
	CONSTANTS USED: 
	
	1. IMAX: Maximum no of interval allowed within hyperperiod.
	2. N: Maximum number of slots allowed within the hyperperiod
	3. JMAX: maximum number of jobs allowed within hyperperiod.
	4. _SC_NPROCESSORS_ONLN : linux constant, number of cores in the machine.
	5. PATH_MAX: maximum path length that is allowed. in ext3 it is 255 bytes.
	6. MAX_NON_STRING_FIELD_LENGTH: max length of each field other than stringed constants like path.
					This should be same for all fields.should be specified in bytes.

	DELIMITERS USED: 
	1. ! : table seperator : used to seperate tables,i.e. job table and interval table.
	2. , : primary field seperator : used to seperate field within a table.

	GENERAL OVERVIEW:

	!HP_START[EOL]

		hp_length, job_count, interval_count [EOL]

		!JOB_START[EOL]
			Job_id, EST, WCET, dl, CoreID, IntervalID, binary[PATH_MAX] [EOL]
		!JOB_END[EOL]
		
		!INTERVAL_START[EOL]
			IntervalID, core_id, start, end, spare_capacity, NumberOfJobs[EOL]
		!INTERVAL_END[EOL]
	
	!HP_END[EOL]
	.
	.
	.
	!HP_START[EOL]
	.
	.
	.
	!HP_END[EOL]

	[EOF]

 	Advantage of such an implementation:
	 1.state machine based parsing implementation is iterativly possible.
	 2.Multiple Hyperperiod can be incorporated within the same file.
	
	GENERAL COMMENT:
 	
	1. Lets start using string delimiters initially and later lets define MAGIC_NUMBER constant / symbolic 
	constant to delimit the start and end of tables.

	2. We need to use config like implementation to define constants and delimiters.

	3. there should be no space between variables, The definition uses space to for better legibility.
	   in other words when ever a parameter ends and a delimiter is used to seperate them then it should
	   start immediatly after the delimiter.

	4. Data in numbers should be itoa of int width.
	   if data holds -ve value then negative part should be represented '-' in MSB; data in this case 
		should not exceed 16777215 in decimal or 0xFFFFFF.
 
2. Interval definition: INTERVAL_START, INTERVAL_END.
 	
	!INTERVAL_START[EOL] /* string constant*/
	IntervalID, core_id, start, end, spare_capacity, NumberOfJobs[EOL] /* values */
	!INTERVAL_END[EOL] /* string constant*/

	Details:
	
	1. General Definition: 
		1.1. parameters of the table are seperated by comma.
		1.2. end of a row is checked by EOL.
		1.3. the interval table should be sorted based on the intervalID in ascending order;
		     where the intervalID defines the sequence of execution in the same order.
	2. parameter defintion:
		2.1. IntervalID: 
			2.1.1. That identifiies the interval, 
			2.1.2. type:  unsigned int/ atleast 32 bits unsigned datatype.
			2.1.3.  value range:only +ve, 0 - IMAX.
		2.2. start :
			2.2.1. defines the start slot of the interval.
			2.2.2. type: unsigned int.
			2.2.3. value range:only +ve, 0 - N.
		2.3. end: 
			2.3.1. defines the end of the interval.
			2.3.2. type: unsigned int. 
			2.3.3. value range:only +ve, 0-N, N: number of slots within the hyperperiod.
		2.4. Spare_capacity: 
			2.4.1. defines spare capacity of the interval.
			2.4.2. type: signed int.
			2.4.3. value range: -ve to positive.
		2.5. NumberofJobs:
			2.5.1. defines the number of jobs within this interval.
			2.5.2. type: unsigned int/ atleast 32 bit unsigned datatype.
			2.5.3. value: 0 - JMAX.
		2.6. core_id:
			2.7.1. Core to which the corresponding interval belongs.
			2.7.2. type: unsigned short
			2.7.3. value: only +ve, 0-(_SC_NPROCESSORS_ONLN - 1) 

3.  JOB definition: JOB_START / JOB_END
	high level table format of the job looks like.
	
	!JOB_START[EOL] /* string constant*/
	Job_id, EST, WCET, dl, CoreID, IntervalID, binary[PATH_MAX] [EOL] /* values */
	!JOB_END[EOL] /* string constant*/
	
	Details:

	1. General Definition:
		1.1. job table should be sorted in a sequence such that  it can directly be associated through 
			its PID with its corresponding intervals.
		1.2. job id need not necessarily be in sequence rather needs to be sorted in corresponence to
			the sequence of intervalID to which job belongs, enabling trivial implementation of 
			associating interval with its corresponding job .
		1.3. The parameters are seperated by comma.
		1.4. The jobs are sperated by a row which is delimited by EOL.

	2. parameter definition:

		2.1. job_id:
			2.1.1. provides unique id to the job within taskset.
			2.1.2. type: unsigned int / atleast 32 bit unsigned datatype.
			2.1.3. value: only +ve, 1 - JMAX.
		2.2. EST:
			2.2.1. Early start time of the job.
			2.2.2. type: unsigned int / atleast 32 bit unsigned datatype.
			2.2.3. value: only +ve, 0 - acceptable +ve value.
		2.3. WCET: 
			2.3.1. Worst case execution time of the job.
			2.3.2. type: unsigned int / atleast 32 bit unsigned datatype.
			2.3.3. value: only +ve, 1 - N.
		2.4. dl:
			2.4.1. deadline of the job.
			2.4.2. type: unsigned int.
			2.4.3. value: only +ve, 1 - N.
		2.5. CoreID:
			2.5.1. core to which the job belongs.
			2.5.2. type: unsigned short.
			2.5.3. value: only +ve, 0-_SC_NPROCESSORS_ONLN.
		2.6. IntervalID:
			2.6.1. interval to which the job belongs.
			2.6.2. type: unsigned int.
			2.6.3. value: only +ve, 0 - IMAX.
		2.7. binary:
			2.7.1. the programme that corresponds to this job, in the form of path which could 
				either relative or absolute, it is ((void*)0) when we use rtspin.
			2.7.2. type: unsigned char / string.
			2.7.3. value: should be PATH_MAX of 0xFF(if no binary)or path to the binary.
				      if ( path < PATH_MAX ), remaining count of the PATH_MAX string 
				should be Hexvalue 0xFF; which is undefined value in ASCII. 

	3. Hyperperiod definition:
		
		3.1. job_count:
			3.1.1. provides the number of jobs within the HP		
			3.1.2. 0 < job_count <= JMAX
			3.1.3. type: unsigned int
		3.2. interval_count:
			3.2.1. provides the number of intervals within HP
			3.2.2. 0 < interval_count <= IMAX
			3.2.3. type: unsigned int
		3.3. hp_length:
			3.3.1. provides the length of the HP_END.
			3.3.2. 0 < hp_length < N
			3.3.3. type: unsigned int



